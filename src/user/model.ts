import { attribute, autoGeneratedHashKey, table } from '@aws/dynamodb-data-mapper-annotations';
import * as jwt from 'jsonwebtoken';

import { Db, getItemList } from '../utils/db';


const {
  hashSync,
  compareSync,
  genSaltSync
// tslint:disable-next-line:no-var-requires
} = require('bcrypt-node');
@table('users')
export class UserModel {
  @autoGeneratedHashKey()
  public id: string;

  @attribute()
  public name: string;

  @attribute()
  public email: string;

  @attribute()
  public password: string;
}

export interface RegisterUserSpec {
  name: string;
  email: string;
  password: string;
}

export interface LoginUserSpec {
  email: string;
  password: string;
}

export const registerUser = async ({
  db,
  name,
  email,
  password,
}: RegisterUserSpec & { db: Db }) => {
  const user = new UserModel();

  const salt = genSaltSync(10);
  const hashedPassword = hashSync(password, salt);

  user.email = email;
  user.name = name;
  user.password = hashedPassword;

  return await db.mapper.put(user);
};

export const loginUser = async ({
  db,
  email,
  password,
}: LoginUserSpec & { db: Db }) => {
  const result = db.mapper.query(UserModel, { email }, { indexName: 'email_index', scanIndexForward: false });
  const users = await getItemList(result);

  if (!users.length) {
    throw new Error("User with provided credentials not found");
  }

  const { email: userEmail, password: hashedPassword, name, id } = users[0];
  const passwordMatched = compareSync(password, hashedPassword)

  if (!passwordMatched) {
    throw new Error("Invalid credentials provided");
  }

  const token = jwt.sign(
    {
      id,
      email,
      name,
    },
    process.env.SECRET!,
    {
      expiresIn: '1h',
    },
  );

  return  {
    token,
    user: {
      email: userEmail,
      name,
      id
    }
  };
}
